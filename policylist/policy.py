import io
import json
from policylist import util
from policylist import schema
from constants import POLICY_FILENAME, POLICY_LOCAL_FILE

def deserialize_config(json_string):
    config = json.loads(json_string, object_hook=util._config_hook)
    try: 
        util.check_schema(config, schema.CONFIG_SCHEMA)
    except util.ConfigError as e:
        raise util.ConfigError("Not a well-formed JSON configuration: {}".format(e))
    return config

def serialize_config(config):
    return json.dumps(config, cls=util.ConfigEncoder)

def config_from_file(filename):
    with io.open(filename, encoding='utf-8') as f:
        return deserialize_config(f.read())

class Config(object):
    """Class for retrieving properties in TLS Policy config.
    """
    def __init__(self, filename=POLICY_LOCAL_FILE):
        self.filename = filename
        self.data = None

    def load(self):
        """Loads JSON configuration from file specified by `filename` property.
        """
        with io.open(self.filename, encoding='utf-8') as f:
            self.data = deserialize_config(f.read())

    def flush(self, filename=None):
        """Flushes configuration to a file as JSON-ified string.
        If a new filename is not given, uses `filename` property.
        """
        if self.data is None:
            return # no data loaded yet
        if filename is None:
            filename = self.filename
        with open(self.filename, 'w') as f:
            f.write(serialize_config(self.data))

    @property
    def author(self):
        return self.data.get('author', None)

    @property
    def comment(self):
        return self.data.get('comment', None)

    # Note: expires and timestamp are required fields, so
    # we don't need to specify defaults in `get` call.
    @property
    def expires(self):
        return self.data.get('expires')

    @property
    def timestamp(self):
        return self.data.get('timestamp')

    @property
    def tls_policies(self):
        return self.data.get('tls-policies')

    def get_tls_policy(self, mx_domain):
        return self.tls_policies.get(mx_domain)

    def get_address_domains(self, mx_hostname, mx_to_domain_map):
        """Do a fuzzy DNS host match on provided map to get lists of policies.

        Args:
          mx_hostname (string): The hostname from an MX record.
          mx_to_domain_map: Mapping from MX hosts to AcceptableMX
              policies, the same AcceptableMX policy may occur more
              than once. e.g. {'mx_host3': set(AcceptableMX, ...)}
              The map can be generated by Config.get_mx_to_domain_policy_map.

        Returns:
          The set containing all AcceptableMX policies that list the
          provided MX host as viable.
        """
        labels = mx_hostname.split(".")
        for n in range(1, len(labels)):
            parent = "." + ".".join(labels[n:])
            if parent in mx_to_domain_map:
                return mx_to_domain_map[parent]
        return None

    def get_mx_to_domain_policy_map(self):
        """Create mapping of MX hostnames to sets of AcceptableMX policies.

        Generate a dictionary that is typically used in log analysis
        (e.g. if your MTA logs interact with beta.innotech.com you use
        this mapping to tell you it used the innotech.com AcceptableMX
        policy or policies). There are of course complications.
        """
        # create reverse mapping dictionary as well for auditing
        # and reviewing logs
        mx_to_domain_policy = collections.defaultdict(set)

        for mx_host, domain_policy in self.get_all_mx_items():
            existing_mx_policies = mx_to_domain_policy.get(mx_host)
            if existing_mx_policies:
                existing_domains = [ e.domain for e in existing_mx_policies ]
                if domain_policy.domain not in existing_domains:
                    #TODO plenty of room to enforce a security policy here
                    # this is also the case of google apps personal domains
                    msg = ('Attempting to add domain policy (%s) for MX host but MX'
                           ' host already has a domain policy (%s), appending...')
                    logger.debug(msg % (domain_policy.domain,
                                        ', '.join(existing_domains)))
            mx_to_domain_policy[mx_host].add(domain_policy)
        return mx_to_domain_policy

    def get_all_mx_items(self):
        """Iterate over (mx_host, mx_policy) - be sure to dedup (TODO)!
        """
        all_mx_items = []
        for domain in self.tls_policies().keys():
          all_mx_items.extend([(mx_host, domain)
                               for mx_host in domain["mxs"]])
        return all_mx_items

    def get_all_mx_hosts(self):
        all_mx_hosts = []
        [ all_mx_hosts.extend(domain["mxs"])
          for domain in self.tls_policies.keys() ]
        return all_mx_hosts

